{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\blood-bank-management\\\\src\\\\components\\\\FindingBlood.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst FindingBlood = () => {\n  const [markers, setMarkers] = useState([]);\n  useEffect(() => {\n    let isMounted = true;\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/data');\n        let data = response.data;\n        console.log('Data type:', typeof data); // Log the type of data\n        console.log('Response:', data); // Log the response data\n\n        // Attempt to parse JSON if needed\n        if (typeof data === 'string') {\n          try {\n            data = JSON.parse(data);\n          } catch (error) {\n            console.error('Error parsing JSON:', error);\n            throw new Error('Data received is not valid JSON');\n          }\n        }\n\n        // Ensure data is an array\n        if (!Array.isArray(data)) {\n          console.error('Received data:', data); // Log the data if it is not an array\n          throw new Error('Data received is not in the expected format');\n        }\n        const google = window.google;\n        if (!google) {\n          throw new Error('Google Maps API not loaded');\n        }\n        const mapInstance = new google.maps.Map(document.getElementById('map'), {\n          center: {\n            lat: -1.2921,\n            lng: 36.8219\n          },\n          zoom: 10\n        });\n        const newMarkers = await Promise.all(data.map(async item => {\n          try {\n            // Ensure 'Event' is a string\n            if (typeof item.Event !== 'string') {\n              throw new Error(`Event value '${item.Event}' is not a string`);\n            }\n            const geocoder = new google.maps.Geocoder();\n            const geocodeResult = await geocoder.geocode({\n              address: item.Location\n            });\n            if (geocodeResult.length === 0) {\n              throw new Error(`Geocode for '${item.Location}' failed`);\n            }\n            const location = geocodeResult[0].geometry.location;\n            const marker = new google.maps.Marker({\n              position: location,\n              map: mapInstance,\n              title: item.Location\n            });\n            return marker;\n          } catch (error) {\n            console.error(`Error geocoding '${item.Location}':`, error);\n            return null;\n          }\n        }));\n        setMarkers(newMarkers.filter(marker => marker !== null)); // Filter out null markers\n      } catch (error) {\n        if (isMounted) {\n          console.error('Error fetching data:', error);\n        }\n      }\n    };\n    const loadGoogleMapsApi = () => {\n      if (!window.google) {\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyD07cMGrAdZzFU1FexlCWLCWlPX-J3g6p4&libraries=places&async=1&defer=1&loading=async`;\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          fetchData();\n        };\n        script.onerror = error => {\n          console.error('Failed to load Google Maps API:', error);\n        };\n        document.head.appendChild(script);\n      } else {\n        fetchData();\n      }\n    };\n    loadGoogleMapsApi();\n    return () => {\n      isMounted = false;\n      // Clean up any resources if needed\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }));\n};\nexport default FindingBlood;","map":{"version":3,"names":["React","useEffect","useState","axios","FindingBlood","markers","setMarkers","isMounted","fetchData","response","get","data","console","log","JSON","parse","error","Error","Array","isArray","google","window","mapInstance","maps","Map","document","getElementById","center","lat","lng","zoom","newMarkers","Promise","all","map","item","Event","geocoder","Geocoder","geocodeResult","geocode","address","Location","length","location","geometry","marker","Marker","position","title","filter","loadGoogleMapsApi","script","createElement","src","async","defer","onload","onerror","head","appendChild","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","id","style","height","width"],"sources":["C:/Users/User/blood-bank-management/src/components/FindingBlood.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst FindingBlood = () => {\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:5000/data');\r\n        let data = response.data;\r\n        \r\n        console.log('Data type:', typeof data); // Log the type of data\r\n        console.log('Response:', data); // Log the response data\r\n\r\n        // Attempt to parse JSON if needed\r\n        if (typeof data === 'string') {\r\n          try {\r\n            data = JSON.parse(data);\r\n          } catch (error) {\r\n            console.error('Error parsing JSON:', error);\r\n            throw new Error('Data received is not valid JSON');\r\n          }\r\n        }\r\n\r\n        // Ensure data is an array\r\n        if (!Array.isArray(data)) {\r\n          console.error('Received data:', data); // Log the data if it is not an array\r\n          throw new Error('Data received is not in the expected format');\r\n        }\r\n\r\n        const google = window.google;\r\n        if (!google) {\r\n          throw new Error('Google Maps API not loaded');\r\n        }\r\n\r\n        const mapInstance = new google.maps.Map(document.getElementById('map'), {\r\n          center: { lat: -1.2921, lng: 36.8219 },\r\n          zoom: 10,\r\n        });\r\n\r\n        const newMarkers = await Promise.all(data.map(async (item) => {\r\n          try {\r\n            // Ensure 'Event' is a string\r\n            if (typeof item.Event !== 'string') {\r\n              throw new Error(`Event value '${item.Event}' is not a string`);\r\n            }\r\n\r\n            const geocoder = new google.maps.Geocoder();\r\n            const geocodeResult = await geocoder.geocode({ address: item.Location });\r\n\r\n            if (geocodeResult.length === 0) {\r\n              throw new Error(`Geocode for '${item.Location}' failed`);\r\n            }\r\n\r\n            const location = geocodeResult[0].geometry.location;\r\n            const marker = new google.maps.Marker({\r\n              position: location,\r\n              map: mapInstance,\r\n              title: item.Location,\r\n            });\r\n\r\n            return marker;\r\n          } catch (error) {\r\n            console.error(`Error geocoding '${item.Location}':`, error);\r\n            return null;\r\n          }\r\n        }));\r\n\r\n        setMarkers(newMarkers.filter(marker => marker !== null)); // Filter out null markers\r\n\r\n      } catch (error) {\r\n        if (isMounted) {\r\n          console.error('Error fetching data:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    const loadGoogleMapsApi = () => {\r\n      if (!window.google) {\r\n        const script = document.createElement('script');\r\n        script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyD07cMGrAdZzFU1FexlCWLCWlPX-J3g6p4&libraries=places&async=1&defer=1&loading=async`;\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.onload = () => {\r\n          fetchData();\r\n        };\r\n        script.onerror = (error) => {\r\n          console.error('Failed to load Google Maps API:', error);\r\n        };\r\n\r\n        document.head.appendChild(script);\r\n      } else {\r\n        fetchData();\r\n      }\r\n    };\r\n\r\n    loadGoogleMapsApi();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      // Clean up any resources if needed\r\n    };\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"map\" style={{ height: '400px', width: '100%' }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FindingBlood;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}