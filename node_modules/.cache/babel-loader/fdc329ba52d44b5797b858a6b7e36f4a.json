{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\blood-bank-management\\\\src\\\\components\\\\pages\\\\Dashboard.js\";\nimport React, { useEffect } from 'react';\nimport '../../App.css';\nimport Dashboards from '../Dashbar';\nimport Footer from '../Footer';\nimport { db, collection, query, where, getDocs } from '../../firebase';\nfunction Dashboard({\n  hospital,\n  handleLogout,\n  updateNotificationCount\n}) {\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        // Query to get the count of pending notifications from 'requests'\n        const requestsQuery = query(collection(db, 'requests'), where('status', '==', 'pending'));\n        const requestsSnapshot = await getDocs(requestsQuery);\n        const requestsCount = requestsSnapshot.size;\n\n        // Query to get the count of pending notifications from 'bloodRequests'\n        const bloodRequestsQuery = query(collection(db, 'bloodRequests'), where('status', '==', 'pending'));\n        const bloodRequestsSnapshot = await getDocs(bloodRequestsQuery);\n        const bloodRequestsCount = bloodRequestsSnapshot.size;\n\n        // Combine the counts from both collections\n        const totalCount = requestsCount + bloodRequestsCount;\n        updateNotificationCount(totalCount);\n        console.log('Notification count:', totalCount);\n      } catch (error) {\n        console.error('Error fetching notifications:', error);\n      }\n    };\n    fetchNotifications();\n  }, [updateNotificationCount]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dashboards, {\n    hospital: hospital,\n    handleLogout: handleLogout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }));\n}\nexport default Dashboard;","map":{"version":3,"names":["React","useEffect","Dashboards","Footer","db","collection","query","where","getDocs","Dashboard","hospital","handleLogout","updateNotificationCount","fetchNotifications","requestsQuery","requestsSnapshot","requestsCount","size","bloodRequestsQuery","bloodRequestsSnapshot","bloodRequestsCount","totalCount","console","log","error","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/User/blood-bank-management/src/components/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport '../../App.css';\r\nimport Dashboards from '../Dashbar';\r\nimport Footer from '../Footer';\r\nimport { db, collection, query, where, getDocs } from '../../firebase';\r\n\r\nfunction Dashboard({ hospital, handleLogout, updateNotificationCount }) {\r\n    useEffect(() => {\r\n        const fetchNotifications = async () => {\r\n            try {\r\n                // Query to get the count of pending notifications from 'requests'\r\n                const requestsQuery = query(collection(db, 'requests'), where('status', '==', 'pending'));\r\n                const requestsSnapshot = await getDocs(requestsQuery);\r\n                const requestsCount = requestsSnapshot.size;\r\n\r\n                // Query to get the count of pending notifications from 'bloodRequests'\r\n                const bloodRequestsQuery = query(collection(db, 'bloodRequests'), where('status', '==', 'pending'));\r\n                const bloodRequestsSnapshot = await getDocs(bloodRequestsQuery);\r\n                const bloodRequestsCount = bloodRequestsSnapshot.size;\r\n\r\n                // Combine the counts from both collections\r\n                const totalCount = requestsCount + bloodRequestsCount;\r\n                updateNotificationCount(totalCount);\r\n                console.log('Notification count:', totalCount);\r\n\r\n            } catch (error) {\r\n                console.error('Error fetching notifications:', error);\r\n            }\r\n        };\r\n\r\n        fetchNotifications();\r\n    }, [updateNotificationCount]);\r\n\r\n    return (\r\n        <>\r\n            <Dashboards hospital={hospital} handleLogout={handleLogout} />\r\n            <Footer />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,eAAe;AACtB,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,EAAE,EAAEC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,QAAQ,gBAAgB;AAEtE,SAASC,SAASA,CAAC;EAAEC,QAAQ;EAAEC,YAAY;EAAEC;AAAwB,CAAC,EAAE;EACpEX,SAAS,CAAC,MAAM;IACZ,MAAMY,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACA;QACA,MAAMC,aAAa,GAAGR,KAAK,CAACD,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC,EAAEG,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;QACzF,MAAMQ,gBAAgB,GAAG,MAAMP,OAAO,CAACM,aAAa,CAAC;QACrD,MAAME,aAAa,GAAGD,gBAAgB,CAACE,IAAI;;QAE3C;QACA,MAAMC,kBAAkB,GAAGZ,KAAK,CAACD,UAAU,CAACD,EAAE,EAAE,eAAe,CAAC,EAAEG,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;QACnG,MAAMY,qBAAqB,GAAG,MAAMX,OAAO,CAACU,kBAAkB,CAAC;QAC/D,MAAME,kBAAkB,GAAGD,qBAAqB,CAACF,IAAI;;QAErD;QACA,MAAMI,UAAU,GAAGL,aAAa,GAAGI,kBAAkB;QACrDR,uBAAuB,CAACS,UAAU,CAAC;QACnCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,UAAU,CAAC;MAElD,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACzD;IACJ,CAAC;IAEDX,kBAAkB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACD,uBAAuB,CAAC,CAAC;EAE7B,oBACIZ,KAAA,CAAAyB,aAAA,CAAAzB,KAAA,CAAA0B,QAAA,qBACI1B,KAAA,CAAAyB,aAAA,CAACvB,UAAU;IAACQ,QAAQ,EAAEA,QAAS;IAACC,YAAY,EAAEA,YAAa;IAAAgB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAC9DhC,KAAA,CAAAyB,aAAA,CAACtB,MAAM;IAAAwB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACX,CAAC;AAEX;AAEA,eAAevB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}