{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\blood-bank-management\\\\src\\\\components\\\\FindingBlood.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst FindingBlood = () => {\n  const [map, setMap] = useState(null); // eslint-disable-line no-unused-vars\n  const [markers, setMarkers] = useState([]); // eslint-disable-line no-unused-vars\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/data');\n        const data = response.data;\n\n        // Ensure Google Maps API is loaded\n        const google = window.google;\n        const mapInstance = new google.maps.Map(document.getElementById('map'), {\n          center: {\n            lat: -1.2921,\n            lng: 36.8219\n          },\n          // Default center for Nairobi\n          zoom: 10\n        });\n        setMap(mapInstance);\n\n        // Geocode each location and create markers\n        const newMarkers = await Promise.all(data.map(async item => {\n          try {\n            const geocoder = new google.maps.Geocoder();\n            const geocodeResult = await geocoder.geocode({\n              address: item.Location\n            });\n            if (geocodeResult.length === 0) {\n              throw new Error(`Geocode for '${item.Location}' failed`);\n            }\n            const location = geocodeResult[0].geometry.location;\n            const marker = new google.maps.Marker({\n              position: location,\n              map: mapInstance,\n              title: item.Location\n            });\n            return marker;\n          } catch (error) {\n            console.error(`Error geocoding '${item.Location}':`, error);\n            return null;\n          }\n        }));\n\n        // Filter out any failed markers (null entries)\n        setMarkers(newMarkers.filter(marker => marker !== null));\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    // Load Google Maps API\n    const loadGoogleMapsApi = () => {\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyD07cMGrAdZzFU1FexlCWLCWlPX-J3g6p4&libraries=places`;\n      script.onload = () => {\n        fetchData();\n      };\n      document.head.appendChild(script);\n    };\n    if (!window.google) {\n      loadGoogleMapsApi();\n    } else {\n      fetchData();\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n};\nexport default FindingBlood;","map":{"version":3,"names":["React","useEffect","useState","axios","FindingBlood","map","setMap","markers","setMarkers","fetchData","response","get","data","google","window","mapInstance","maps","Map","document","getElementById","center","lat","lng","zoom","newMarkers","Promise","all","item","geocoder","Geocoder","geocodeResult","geocode","address","Location","length","Error","location","geometry","marker","Marker","position","title","error","console","filter","loadGoogleMapsApi","script","createElement","src","onload","head","appendChild","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","id","style","height","width"],"sources":["C:/Users/User/blood-bank-management/src/components/FindingBlood.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst FindingBlood = () => {\r\n  const [map, setMap] = useState(null);  // eslint-disable-line no-unused-vars\r\n  const [markers, setMarkers] = useState([]);   // eslint-disable-line no-unused-vars\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:5000/data');\r\n        const data = response.data;\r\n\r\n        // Ensure Google Maps API is loaded\r\n        const google = window.google;\r\n        const mapInstance = new google.maps.Map(document.getElementById('map'), {\r\n          center: { lat: -1.2921, lng: 36.8219 }, // Default center for Nairobi\r\n          zoom: 10,\r\n        });\r\n\r\n        setMap(mapInstance);\r\n\r\n        // Geocode each location and create markers\r\n        const newMarkers = await Promise.all(data.map(async (item) => {\r\n          try {\r\n            const geocoder = new google.maps.Geocoder();\r\n            const geocodeResult = await geocoder.geocode({ address: item.Location });\r\n            if (geocodeResult.length === 0) {\r\n              throw new Error(`Geocode for '${item.Location}' failed`);\r\n            }\r\n            const location = geocodeResult[0].geometry.location;\r\n            const marker = new google.maps.Marker({\r\n              position: location,\r\n              map: mapInstance,\r\n              title: item.Location,\r\n            });\r\n            return marker;\r\n          } catch (error) {\r\n            console.error(`Error geocoding '${item.Location}':`, error);\r\n            return null;\r\n          }\r\n        }));\r\n\r\n        // Filter out any failed markers (null entries)\r\n        setMarkers(newMarkers.filter(marker => marker !== null));\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    // Load Google Maps API\r\n    const loadGoogleMapsApi = () => {\r\n      const script = document.createElement('script');\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyD07cMGrAdZzFU1FexlCWLCWlPX-J3g6p4&libraries=places`;\r\n      script.onload = () => {\r\n        fetchData();\r\n      };\r\n      document.head.appendChild(script);\r\n    };\r\n\r\n    if (!window.google) {\r\n      loadGoogleMapsApi();\r\n    } else {\r\n      fetchData();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"map\" style={{ height: '400px', width: '100%' }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FindingBlood;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}