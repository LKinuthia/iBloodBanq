{"ast":null,"code":"import { db } from '../firebase';\nimport { collection, addDoc, getDocs, updateDoc, deleteDoc, doc, query, where, getDoc } from 'firebase/firestore';\nconst bloodCollectionRef = collection(db, 'blood_records');\nconst addOrUpdateBloodRecord = async newRecord => {\n  try {\n    // Check if a record with the same location exists\n    const q = query(bloodCollectionRef, where(\"location\", \"==\", newRecord.location));\n    const querySnapshot = await getDocs(q);\n    if (!querySnapshot.empty) {\n      const existingDoc = querySnapshot.docs[0];\n      const existingRecord = {\n        ...existingDoc.data(),\n        id: existingDoc.id\n      };\n      if (!existingRecord.bloodStock) {\n        existingRecord.bloodStock = [];\n      }\n\n      // Check if blood type exists in the stock\n      const bloodTypeIndex = existingRecord.bloodStock.findIndex(stock => stock.type === newRecord.bloodType);\n      if (bloodTypeIndex !== -1) {\n        // Update existing blood type amount\n        existingRecord.bloodStock[bloodTypeIndex].amount = parseInt(newRecord.donations, 10);\n      } else {\n        // Add new blood type to the stock\n        existingRecord.bloodStock.push({\n          type: newRecord.bloodType,\n          amount: parseInt(newRecord.donations, 10)\n        });\n      }\n      const recordDoc = doc(db, 'blood_records', existingRecord.id);\n      await updateDoc(recordDoc, {\n        bloodStock: existingRecord.bloodStock\n      });\n    } else {\n      // If no existing record, add a new one\n      await addDoc(bloodCollectionRef, {\n        ...newRecord,\n        bloodStock: [{\n          type: newRecord.bloodType,\n          amount: parseInt(newRecord.donations, 10)\n        }]\n      });\n    }\n  } catch (error) {\n    console.error(\"Error adding or updating blood record:\", error);\n    throw error;\n  }\n};\nconst getBloodRecords = async () => {\n  const data = await getDocs(bloodCollectionRef);\n  return data.docs.map(doc => ({\n    ...doc.data(),\n    id: doc.id\n  }));\n};\nconst updateBloodRecord = async (id, updatedRecord) => {\n  try {\n    const recordDoc = doc(db, 'blood_records', id);\n    const docSnapshot = await getDoc(recordDoc);\n    if (!docSnapshot.exists()) {\n      throw new Error(`Record with id ${id} does not exist`);\n    }\n    const existingRecord = docSnapshot.data();\n    const updatedBloodStock = existingRecord.bloodStock.map(stock => stock.type === updatedRecord.bloodType ? {\n      ...stock,\n      amount: parseInt(updatedRecord.donations, 10)\n    } : stock);\n    await updateDoc(recordDoc, {\n      bloodStock: updatedBloodStock\n    });\n  } catch (error) {\n    console.error(\"Error updating blood record:\", error);\n    throw error;\n  }\n};\nconst deleteBloodRecord = async id => {\n  try {\n    const recordDoc = doc(db, 'blood_records', id);\n    await deleteDoc(recordDoc);\n  } catch (error) {\n    console.error(\"Error deleting blood record:\", error);\n    throw error;\n  }\n};\nconst requestBlood = async requestDetails => {\n  try {\n    await addDoc(bloodCollectionRef, requestDetails);\n  } catch (error) {\n    console.error(\"Error requesting blood:\", error);\n    throw error;\n  }\n};\nexport { addOrUpdateBloodRecord, getBloodRecords, updateBloodRecord, deleteBloodRecord, requestBlood };","map":{"version":3,"names":["db","collection","addDoc","getDocs","updateDoc","deleteDoc","doc","query","where","getDoc","bloodCollectionRef","addOrUpdateBloodRecord","newRecord","q","location","querySnapshot","empty","existingDoc","docs","existingRecord","data","id","bloodStock","bloodTypeIndex","findIndex","stock","type","bloodType","amount","parseInt","donations","push","recordDoc","error","console","getBloodRecords","map","updateBloodRecord","updatedRecord","docSnapshot","exists","Error","updatedBloodStock","deleteBloodRecord","requestBlood","requestDetails"],"sources":["C:/Users/User/blood-bank-management/src/services/bloodService.js"],"sourcesContent":["import { db } from '../firebase';\r\nimport { collection, addDoc, getDocs, updateDoc, deleteDoc, doc, query, where, getDoc } from 'firebase/firestore';\r\n\r\nconst bloodCollectionRef = collection(db, 'blood_records');\r\n\r\nconst addOrUpdateBloodRecord = async (newRecord) => {\r\n    try {\r\n        // Check if a record with the same location exists\r\n        const q = query(bloodCollectionRef, where(\"location\", \"==\", newRecord.location));\r\n        const querySnapshot = await getDocs(q);\r\n\r\n        if (!querySnapshot.empty) {\r\n            const existingDoc = querySnapshot.docs[0];\r\n            const existingRecord = { ...existingDoc.data(), id: existingDoc.id };\r\n\r\n            if (!existingRecord.bloodStock) {\r\n                existingRecord.bloodStock = [];\r\n            }\r\n\r\n            // Check if blood type exists in the stock\r\n            const bloodTypeIndex = existingRecord.bloodStock.findIndex(stock => stock.type === newRecord.bloodType);\r\n\r\n            if (bloodTypeIndex !== -1) {\r\n                // Update existing blood type amount\r\n                existingRecord.bloodStock[bloodTypeIndex].amount = parseInt(newRecord.donations, 10);\r\n            } else {\r\n                // Add new blood type to the stock\r\n                existingRecord.bloodStock.push({ type: newRecord.bloodType, amount: parseInt(newRecord.donations, 10) });\r\n            }\r\n\r\n            const recordDoc = doc(db, 'blood_records', existingRecord.id);\r\n            await updateDoc(recordDoc, { bloodStock: existingRecord.bloodStock });\r\n        } else {\r\n            // If no existing record, add a new one\r\n            await addDoc(bloodCollectionRef, {\r\n                ...newRecord,\r\n                bloodStock: [{ type: newRecord.bloodType, amount: parseInt(newRecord.donations, 10) }]\r\n            });\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error adding or updating blood record:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nconst getBloodRecords = async () => {\r\n    const data = await getDocs(bloodCollectionRef);\r\n    return data.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\r\n};\r\n\r\nconst updateBloodRecord = async (id, updatedRecord) => {\r\n    try {\r\n        const recordDoc = doc(db, 'blood_records', id);\r\n        const docSnapshot = await getDoc(recordDoc);\r\n\r\n        if (!docSnapshot.exists()) {\r\n            throw new Error(`Record with id ${id} does not exist`);\r\n        }\r\n\r\n        const existingRecord = docSnapshot.data();\r\n\r\n        const updatedBloodStock = existingRecord.bloodStock.map(stock =>\r\n            stock.type === updatedRecord.bloodType\r\n                ? { ...stock, amount: parseInt(updatedRecord.donations, 10) }\r\n                : stock\r\n        );\r\n\r\n        await updateDoc(recordDoc, {\r\n            bloodStock: updatedBloodStock\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error updating blood record:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nconst deleteBloodRecord = async (id) => {\r\n    try {\r\n        const recordDoc = doc(db, 'blood_records', id);\r\n        await deleteDoc(recordDoc);\r\n    } catch (error) {\r\n        console.error(\"Error deleting blood record:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nconst requestBlood = async (requestDetails) => {\r\n    try {\r\n        await addDoc(bloodCollectionRef, requestDetails);\r\n    } catch (error) {\r\n        console.error(\"Error requesting blood:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport { addOrUpdateBloodRecord, getBloodRecords, updateBloodRecord, deleteBloodRecord, requestBlood };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}