{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\blood-bank-management\\\\src\\\\components\\\\BloodRecords.js\";\nimport React, { useState } from 'react';\nimport Sidebar from './Sidebar';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport './BloodRecords.css';\n\n// Register the components needed for chart.js\nChartJS.register(LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nconst BloodRecords = () => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [predictions, setPredictions] = useState([]);\n  const [inputValues, setInputValues] = useState([]);\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n  const handleInputChange = (index, value) => {\n    const newValues = [...inputValues];\n    newValues[index] = parseFloat(value);\n    setInputValues(newValues);\n  };\n  const fetchPredictions = () => {\n    const query = inputValues.map(value => `values=${encodeURIComponent(value)}`).join('&');\n    const url = `http://127.0.0.1:5000/dashboard/?${query}`;\n    fetch(url).then(response => response.json()).then(data => {\n      setPredictions(data);\n    }).catch(error => console.error('Error fetching predictions:', error));\n  };\n\n  // Prepare data for the chart\n  const chartData = {\n    labels: predictions.map(item => item.Date),\n    datasets: [{\n      label: 'Prediction',\n      data: predictions.map(item => item.Prediction),\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      fill: false\n    }, {\n      label: 'Supply',\n      data: predictions.map(item => item.Supply),\n      borderColor: 'rgba(255, 99, 132, 1)',\n      backgroundColor: 'rgba(255, 99, 132, 0.2)',\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blood-records-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Sidebar, {\n    isOpen: isSidebarOpen,\n    toggleSidebar: toggleSidebar,\n    handleLogout: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blood-records-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sidebar-toggler\",\n    onClick: toggleSidebar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, \"\\u2630\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, \"Blood Records Dashboard\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, \"Enter Values for Prediction\"), [...Array(3).keys()].map(index => /*#__PURE__*/React.createElement(\"input\", {\n    key: index,\n    type: \"number\",\n    placeholder: `Value ${index + 1}`,\n    onChange: e => handleInputChange(index, e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchPredictions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, \"Predict\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, \"Predictions\"), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, JSON.stringify(predictions, null, 2)), predictions.length > 0 && /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: 'Blood Supply and Prediction'\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }))));\n};\nexport default BloodRecords;","map":{"version":3,"names":["React","useState","Sidebar","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","Title","Tooltip","Legend","register","BloodRecords","isSidebarOpen","setIsSidebarOpen","predictions","setPredictions","inputValues","setInputValues","toggleSidebar","handleInputChange","index","value","newValues","parseFloat","fetchPredictions","query","map","encodeURIComponent","join","url","fetch","then","response","json","data","catch","error","console","chartData","labels","item","Date","datasets","label","Prediction","borderColor","backgroundColor","fill","Supply","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","handleLogout","onClick","Array","keys","key","type","placeholder","onChange","e","target","JSON","stringify","length","options","responsive","plugins","legend","position","title","display","text"],"sources":["C:/Users/User/blood-bank-management/src/components/BloodRecords.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Sidebar from './Sidebar';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\r\nimport './BloodRecords.css';\r\n\r\n// Register the components needed for chart.js\r\nChartJS.register(LineElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n\r\nconst BloodRecords = () => {\r\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n    const [predictions, setPredictions] = useState([]);\r\n    const [inputValues, setInputValues] = useState([]);\r\n\r\n    const toggleSidebar = () => {\r\n        setIsSidebarOpen(!isSidebarOpen);\r\n    };\r\n\r\n    const handleInputChange = (index, value) => {\r\n        const newValues = [...inputValues];\r\n        newValues[index] = parseFloat(value);\r\n        setInputValues(newValues);\r\n    };\r\n\r\n    const fetchPredictions = () => {\r\n        const query = inputValues.map(value => `values=${encodeURIComponent(value)}`).join('&');\r\n        const url = `http://127.0.0.1:5000/dashboard/?${query}`;\r\n\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setPredictions(data);\r\n            })\r\n            .catch(error => console.error('Error fetching predictions:', error));\r\n    };\r\n\r\n    // Prepare data for the chart\r\n    const chartData = {\r\n        labels: predictions.map(item => item.Date),\r\n        datasets: [\r\n            {\r\n                label: 'Prediction',\r\n                data: predictions.map(item => item.Prediction),\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                fill: false,\r\n            },\r\n            {\r\n                label: 'Supply',\r\n                data: predictions.map(item => item.Supply),\r\n                borderColor: 'rgba(255, 99, 132, 1)',\r\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                fill: false,\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <div className=\"blood-records-container\">\r\n            <Sidebar \r\n                isOpen={isSidebarOpen} \r\n                toggleSidebar={toggleSidebar} \r\n                handleLogout={() => {}} \r\n            />\r\n            <div className=\"blood-records-content\">\r\n                <button className=\"sidebar-toggler\" onClick={toggleSidebar}>\r\n                    â˜°\r\n                </button>\r\n                <h1>Blood Records Dashboard</h1>\r\n                <div>\r\n                    <h2>Enter Values for Prediction</h2>\r\n                    {[...Array(3).keys()].map(index => (\r\n                        <input\r\n                            key={index}\r\n                            type=\"number\"\r\n                            placeholder={`Value ${index + 1}`}\r\n                            onChange={(e) => handleInputChange(index, e.target.value)}\r\n                        />\r\n                    ))}\r\n                    <button onClick={fetchPredictions}>Predict</button>\r\n                </div>\r\n                <div>\r\n                    <h2>Predictions</h2>\r\n                    <pre>{JSON.stringify(predictions, null, 2)}</pre>\r\n                    {predictions.length > 0 && (\r\n                        <Line data={chartData} options={{ responsive: true, plugins: { legend: { position: 'top' }, title: { display: true, text: 'Blood Supply and Prediction' } } }} />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BloodRecords;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}